// Code generated by MockGen. DO NOT EDIT.
// Source: internal/github/pr_client.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	reflect "reflect"

	repository "github.com/cli/go-gh/v2/pkg/repository"
	gomock "github.com/golang/mock/gomock"
	git "github.com/hbk619/gh-peruse/internal/git"
)

// MockPullRequestClient is a mock of PullRequestClient interface.
type MockPullRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestClientMockRecorder
}

// MockPullRequestClientMockRecorder is the mock recorder for MockPullRequestClient.
type MockPullRequestClientMockRecorder struct {
	mock *MockPullRequestClient
}

// NewMockPullRequestClient creates a new mock instance.
func NewMockPullRequestClient(ctrl *gomock.Controller) *MockPullRequestClient {
	mock := &MockPullRequestClient{ctrl: ctrl}
	mock.recorder = &MockPullRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestClient) EXPECT() *MockPullRequestClientMockRecorder {
	return m.recorder
}

// DetectCurrentPR mocks base method.
func (m *MockPullRequestClient) DetectCurrentPR(repo *git.Repo) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectCurrentPR", repo)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectCurrentPR indicates an expected call of DetectCurrentPR.
func (mr *MockPullRequestClientMockRecorder) DetectCurrentPR(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectCurrentPR", reflect.TypeOf((*MockPullRequestClient)(nil).DetectCurrentPR), repo)
}

// GetCommentCountForOwnedPRs mocks base method.
func (m *MockPullRequestClient) GetCommentCountForOwnedPRs(repo *git.Repo) (map[int]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentCountForOwnedPRs", repo)
	ret0, _ := ret[0].(map[int]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCountForOwnedPRs indicates an expected call of GetCommentCountForOwnedPRs.
func (mr *MockPullRequestClientMockRecorder) GetCommentCountForOwnedPRs(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCountForOwnedPRs", reflect.TypeOf((*MockPullRequestClient)(nil).GetCommentCountForOwnedPRs), repo)
}

// GetPRDetails mocks base method.
func (m *MockPullRequestClient) GetPRDetails(repo *git.Repo, verbose bool) (*git.PR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPRDetails", repo, verbose)
	ret0, _ := ret[0].(*git.PR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPRDetails indicates an expected call of GetPRDetails.
func (mr *MockPullRequestClientMockRecorder) GetPRDetails(repo, verbose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPRDetails", reflect.TypeOf((*MockPullRequestClient)(nil).GetPRDetails), repo, verbose)
}

// GetRepoDetails mocks base method.
func (m *MockPullRequestClient) GetRepoDetails() (repository.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoDetails")
	ret0, _ := ret[0].(repository.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoDetails indicates an expected call of GetRepoDetails.
func (mr *MockPullRequestClientMockRecorder) GetRepoDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoDetails", reflect.TypeOf((*MockPullRequestClient)(nil).GetRepoDetails))
}

// Reply mocks base method.
func (m *MockPullRequestClient) Reply(contents string, comment *git.Comment, prId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reply", contents, comment, prId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MockPullRequestClientMockRecorder) Reply(contents, comment, prId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockPullRequestClient)(nil).Reply), contents, comment, prId)
}

// Resolve mocks base method.
func (m *MockPullRequestClient) Resolve(comment *git.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resolve indicates an expected call of Resolve.
func (mr *MockPullRequestClientMockRecorder) Resolve(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockPullRequestClient)(nil).Resolve), comment)
}
