// Code generated by MockGen. DO NOT EDIT.
// Source: internal/github/pr_service.go

// Package mock_github is a generated GoMock package.
package mock_github

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	git "github.com/hbk619/git-browse/internal/git"
)

// MockPullRequestClient is a mock of PullRequestClient interface.
type MockPullRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockPullRequestClientMockRecorder
}

// MockPullRequestClientMockRecorder is the mock recorder for MockPullRequestClient.
type MockPullRequestClientMockRecorder struct {
	mock *MockPullRequestClient
}

// NewMockPullRequestClient creates a new mock instance.
func NewMockPullRequestClient(ctrl *gomock.Controller) *MockPullRequestClient {
	mock := &MockPullRequestClient{ctrl: ctrl}
	mock.recorder = &MockPullRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPullRequestClient) EXPECT() *MockPullRequestClientMockRecorder {
	return m.recorder
}

// GetCommitComments mocks base method.
func (m *MockPullRequestClient) GetCommitComments(repoOwner, repoName string, pullNumber int) ([]git.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitComments", repoOwner, repoName, pullNumber)
	ret0, _ := ret[0].([]git.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitComments indicates an expected call of GetCommitComments.
func (mr *MockPullRequestClientMockRecorder) GetCommitComments(repoOwner, repoName, pullNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitComments", reflect.TypeOf((*MockPullRequestClient)(nil).GetCommitComments), repoOwner, repoName, pullNumber)
}

// GetMainPRDetails mocks base method.
func (m *MockPullRequestClient) GetMainPRDetails(pullNumber int, verbose bool) (*git.PR, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainPRDetails", pullNumber, verbose)
	ret0, _ := ret[0].(*git.PR)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainPRDetails indicates an expected call of GetMainPRDetails.
func (mr *MockPullRequestClientMockRecorder) GetMainPRDetails(pullNumber, verbose interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainPRDetails", reflect.TypeOf((*MockPullRequestClient)(nil).GetMainPRDetails), pullNumber, verbose)
}

// GetRepoDetails mocks base method.
func (m *MockPullRequestClient) GetRepoDetails() (*git.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoDetails")
	ret0, _ := ret[0].(*git.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoDetails indicates an expected call of GetRepoDetails.
func (mr *MockPullRequestClientMockRecorder) GetRepoDetails() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoDetails", reflect.TypeOf((*MockPullRequestClient)(nil).GetRepoDetails))
}
