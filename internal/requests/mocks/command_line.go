// Code generated by MockGen. DO NOT EDIT.
// Source: internal/requests/command_line.go

// Package mock_requests is a generated GoMock package.
package mock_requests

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommandLine is a mock of CommandLine interface.
type MockCommandLine struct {
	ctrl     *gomock.Controller
	recorder *MockCommandLineMockRecorder
}

// MockCommandLineMockRecorder is the mock recorder for MockCommandLine.
type MockCommandLineMockRecorder struct {
	mock *MockCommandLine
}

// NewMockCommandLine creates a new mock instance.
func NewMockCommandLine(ctrl *gomock.Controller) *MockCommandLine {
	mock := &MockCommandLine{ctrl: ctrl}
	mock.recorder = &MockCommandLineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandLine) EXPECT() *MockCommandLineMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockCommandLine) Run(command string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", command)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockCommandLineMockRecorder) Run(command interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommandLine)(nil).Run), command)
}
